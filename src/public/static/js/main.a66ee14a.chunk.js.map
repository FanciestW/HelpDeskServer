{"version":3,"sources":["assets/confused_travolta.gif","redux/actions/AuthedActions.ts","components/DashboardCard/DashboardCard.tsx","components/Dashboard/Dashboard.tsx","components/TicketView/TicketView.tsx","components/NewTicketView/NewTicketView.tsx","components/TicketDetailView/TicketDetailView.tsx","components/TasksView/TasksView.tsx","components/NewTaskView/NewTaskView.tsx","components/TaskDetailView/TaskDetailView.tsx","components/Navbar/Navbar.tsx","components/NotFound/NotFound.tsx","components/SignUp/SignUp.tsx","components/Login/Login.tsx","components/NoticeSnackbar/NoticeSnackbar.tsx","components/PeoplesView/PeoplesView.tsx","components/RequestsView/RequestsView.tsx","redux/actions/UserActions.ts","components/VerifyEmailView/VerifyEmailView.tsx","components/App/App.tsx","serviceWorker.ts","redux/reducers/AuthedReducer.ts","redux/reducers/UserReducer.ts","index.tsx"],"names":["module","exports","EAuthedActions","useStyles","makeStyles","card","minWidth","minHeight","cardHeader","textAlign","cardContent","backgroundColor","cardData","paddingTop","fontSize","height","fontWeight","cardActions","DashboardCard","props","classes","Card","className","CardHeader","title","titleTypographyProps","color","CardContent","Typography","gutterBottom","data","CardActions","Button","size","href","buttonDestination","buttonText","changeAuthed","isAuthed","type","CHANGE_AUTHED","root","flexGrow","display","flexWrap","padding","paper","width","Dashboard","dispatch","useDispatch","useState","setCardData","useSelector","state","userReducer","user","uid","isTechnician","technicianQery","gql","clientQuery","refetch","useQuery","onCompleted","getOpenTickets","length","toString","getUpcomingTasks","getClients","getCreatedTickets","getTechnicians","onError","error","networkError","statusCode","localStorage","setItem","useEffect","cardTitles","cardButtonText","cardButtonDestination","Grid","container","spacing","item","xs","justify","map","index","key","theme","addFab","margin","top","right","bottom","left","position","TicketView","history","useHistory","ticketsData","setTicketsData","query","formattedData","getTickets","tix","ticketDueDate","Intl","DateTimeFormat","format","Date","dueDate","err","substring","description","createdBy","firstName","lastName","assignedTo","status","priority","ticketId","columns","name","label","options","filter","sort","filterType","print","download","rowsPerPageOptions","onRowClick","_data","cellMeta","push","dataIndex","Tooltip","Fab","aria-label","onClick","Add","layout","marginLeft","marginRight","breakpoints","up","marginTop","marginBottom","buttons","justifyContent","button","progress","NewTicketView","techniciansList","setTechniciansList","setTitle","setDescription","setAssignedTo","setStatus","setPriority","undefined","setDueDate","currentUser","technicianListQuery","loadingTechniciansList","email","technicianList","loading","newTicketMutation","useMutation","goBack","addNewTicket","addTicketLoading","statusLabels","Fragment","Paper","variant","TextField","required","id","value","onChange","event","target","fullWidth","rows","multiline","sm","FormControl","InputLabel","Select","labelId","defaultValue","stat","MenuItem","Autocomplete","autoSelect","autoHighlight","_","getOptionLabel","option","renderInput","params","utils","DateFnsUtils","disableToolbar","minDate","minDateMessage","emptyLabel","inputVariant","date","KeyboardButtonProps","variables","toISOString","CircularProgress","TicketDetailView","assignedToUid","setAssignedToUid","useParams","ticketQuery","getATicket","refetchTicketData","loadingTicketData","updateTicketMutation","updateTicket","updateTicketLoading","find","invalidLabel","TasksView","tasksData","setTasksData","getTasksQuery","getTasks","task","taskId","NewTaskView","newTaskMutation","addNewTask","addTaskLoading","TaskDetailView","taskQuery","getATask","refetchTaskData","loadingTaskData","updateTaskMutation","updateTask","updateTaskLoading","menuButton","cursor","iconButton","sideNav","routerLink","textDecoration","Navbar","menuIsOpen","setmenuIsOpen","getItem","a","Axios","post","window","location","reload","handleToggleMenu","role","onKeyDown","List","to","ListItem","ListItemIcon","ListItemText","primary","AssignmentLate","People","SupervisorAccount","MarkunreadMailbox","AccountCircle","AppBar","Toolbar","IconButton","edge","Menu","SwipeableDrawer","open","onOpen","onClose","placement","Brightness7","Brightness4","ExitToApp","goHomeButton","NotFound","style","component","zIndex","src","travolta","alt","flexDirection","alignItems","avatar","palette","secondary","main","form","submit","float","SignUp","setFirstName","middleName","setMiddleName","setLastName","setEmail","password","setPassword","confirmPassword","setConfirmPassword","phone","setPhone","company","setCompany","setIsTechnician","errorSnackbarIsOpen","setErrorSnackbarIsOpen","handleSignUp","e","preventDefault","signUpData","res","console","Container","maxWidth","Avatar","onSubmit","noValidate","autoFocus","autoComplete","FormLabel","RadioGroup","FormControlLabel","control","Radio","Link","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","action","Login","handleLogin","loginData","Checkbox","Alert","elevation","NoticeSnackbar","setOpen","handleClose","_event","reason","duration","severity","PeoplesView","peoplesListData","setPeoplesListData","requestDialogOpen","setRequestDialogOpen","requestEmail","setRequestEmail","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","snackbarOpen","setSnackbarOpen","newRequestMutation","sendRequest","getClientsQuery","getTechniciansQuery","show","peopleData","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","recipientEmail","gridItem","list","background","listItemButton","RequestsView","checked","setChecked","requestsData","setRequestsData","getRequestsQuery","getReceivedRequests","acceptRequestMutation","deleteIndex","findIndex","request","requestId","acceptRequest","arrayCopy","splice","handleToggle","currentIndex","indexOf","newChecked","direction","dense","tabIndex","disableRipple","inputProps","requester","ListItemSecondaryAction","requesterUid","EUserActions","messageDiv","header","flex","subtitle","statusIcon","paperBox","VerifyEmailView","userAuthed","content","valid","App","authedReducer","getUserInfoQuery","useLazyQuery","getUserInfo","userData","JSON","stringify","UPDATE_USER","updateUser","responsiveFontSizes","createMuiTheme","ThemeProvider","CssBaseline","default","path","exact","Boolean","hostname","match","DEFAULT_STATE","parse","rootReducer","combineReducers","store","createStore","GraphQLClient","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","defaultOptions","fetchPolicy","errorPolicy","mutate","graphQLErrors","forEach","locations","log","ReactDOM","render","StrictMode","ApolloProvider","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a66ee14a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/confused_travolta.4a06efb5.gif\";","export enum EAuthedActions {\n  CHANGE_AUTHED = 'CHANGE_AUTHED',\n}\n\nexport function changeAuthed(isAuthed: boolean) {\n  return {\n    type: EAuthedActions.CHANGE_AUTHED,\n    isAuthed,\n  };\n}","import React from 'react';\nimport { Button, Card, CardActions, CardContent, CardHeader, Typography, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  card: {\n    minWidth: 275,\n    minHeight: 280,\n  },\n  cardHeader: {\n    textAlign: 'center',\n  },\n  cardContent: {\n    backgroundColor: '#00000012',\n  },\n  cardData: {\n    paddingTop: 30,\n    fontSize: 64,\n    height: 110,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  cardActions: {\n    minHeight: 40,\n  },\n}));\n\nconst DashboardCard = (props: DashboardCardProps) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.card}>\n      <CardHeader className={classes.cardHeader} \n        title={props.title}\n        titleTypographyProps={{color: 'textSecondary'}}/>\n      <CardContent className={classes.cardContent}>\n        <Typography className={classes.cardData} color=\"textPrimary\" gutterBottom>\n          {props.data}\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.cardActions}>\n        <Button size='small' href={props.buttonDestination}>{props.buttonText}</Button>\n      </CardActions>\n    </Card>\n  );\n};\n\ninterface DashboardCardProps {\n  title: string;\n  data: any;\n  buttonText?: string;\n  buttonDestination?: string;\n}\n\nexport default DashboardCard;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// eslint-disable-next-line no-unused-vars\nimport { useQuery, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DashboardCard from '../DashboardCard/DashboardCard';\nimport IUser from '../../interfaces/User';\nimport { IRootReducer } from '../../redux/IRootReducer';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    padding: 10\n  },\n  paper: {\n    height: 280,\n    width: 240,\n  },\n}));\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const [cardData, setCardData] = useState(['N/A', 'N/A', 'N/A']);\n\n  const { uid, isTechnician }: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user) || {};\n\n  const technicianQery = gql`\n    query {\n      getOpenTickets {\n        ticketId\n      }\n      getUpcomingTasks {\n        taskId\n      }\n      getClients {\n        uid\n      }\n    }\n  `;\n  const clientQuery = gql`\n  query {\n    getCreatedTickets {\n      ticketId\n    }\n    getOpenTickets {\n      ticketId\n    }\n    getTechnicians {\n      uid\n    }\n  }\n`;\n  const { refetch } = useQuery(isTechnician ? technicianQery : clientQuery, {\n    onCompleted: (data) => {\n      if (isTechnician) {\n        setCardData([\n          data?.getOpenTickets?.length?.toString() || 'N/A',\n          data?.getUpcomingTasks?.length?.toString() || 'N/A',\n          data?.getClients?.length?.toString() || 'N/A',\n        ]);\n      } else {\n        setCardData([\n          data?.getCreatedTickets?.length?.toString() || 'N/A',\n          data?.getOpenTickets?.length?.toString() || 'N/A',\n          data?.getTechnicians?.length?.toString() || 'N/A',\n        ]);\n      }\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [uid]);\n\n  // Static UI Component Text for Dashboard Card Components.\n  const cardTitles = isTechnician ? ['Open Tickets', 'Upcoming Tasks', 'Clients'] : ['My Tickets', 'Open Tickets', 'My Technicians'];\n  const cardButtonText = isTechnician ? ['See Open Tickets', 'See Tasks', 'Clients List'] : ['See My Tickets', 'See Open Tickets', 'Technicians List'];\n  const cardButtonDestination = isTechnician ? ['/tickets', '/tasks', '/clients'] : ['/tickets', '/tickets', '/technicians'];\n\n  return (\n    <div className={classes.root}>\n      <Grid container className={classes.root} spacing={2}>\n        <Grid item xs={12}>\n          <Grid container justify=\"center\" spacing={2}>\n            {cardTitles.map((title, index) => {\n              return (\n                <Grid key={index} item>\n                  <DashboardCard title={title}\n                    data={cardData[index]}\n                    buttonText={cardButtonText[index]}\n                    buttonDestination={cardButtonDestination[index]} />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Dashboard;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useQuery, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport MUIDataTable from 'mui-datatables';\nimport { Fab, Tooltip, makeStyles } from '@material-ui/core';\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport ITicket from '../../interfaces/Ticket';\nimport IUser from '../../interfaces/User';\nimport { IRootReducer } from '../../redux/IRootReducer';\n\nconst useStyles = makeStyles((theme) => ({\n  addFab: {\n    margin: theme.spacing(1),\n    top: 'auto',\n    right: 20,\n    bottom: 20,\n    left: 'auto',\n    position: 'absolute',\n  }\n}));\n\nexport default function TicketView() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n\n  const [ticketsData, setTicketsData] = useState<string[][]>([]);\n  const { uid }: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user) || {};\n  \n  const query = gql`\n    query {\n      getTickets {\n        ticketId\n        title\n        description\n        createdBy {\n          uid\n          firstName\n          lastName\n          email\n        }\n        assignedTo {\n          uid\n          firstName\n          lastName\n          email\n        }\n        status\n        priority\n        dueDate\n      }\n    }\n  `;\n  const { refetch } = useQuery(query, {\n    onCompleted: (data: { getTickets: ITicket[] }) => {\n      const formattedData = data?.getTickets?.map((tix: ITicket): string[] => {\n        let ticketDueDate = 'No Date';\n        try {\n          ticketDueDate = Intl.DateTimeFormat('en-US').format(new Date(tix.dueDate || '')).toString();\n        } catch (err) {\n          ticketDueDate = 'No Date';\n        }\n        return [\n          tix.title ? `${tix.title?.substring(0, 40)}${tix.title.length > 40 ? '...' : ''}` : '',\n          tix.description ? `${tix.description?.substring(0, 80)}${tix.description.length > 80 ? '...' : ''}` : '',\n          tix.createdBy ? `${tix.createdBy?.firstName} ${tix.createdBy?.lastName}` : 'N/A',\n          tix.assignedTo ? `${tix.assignedTo?.firstName} ${tix.assignedTo?.lastName}` : 'Unassigned',\n          tix.status || 'N/A',\n          tix.priority?.toString() || 'N/A',\n          ticketDueDate,\n          tix.ticketId || '',\n        ];\n      });\n      setTicketsData(formattedData);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [uid]);\n\n  const onTicketRowClick = (_data: string[], cellMeta: { dataIndex: number; rowIndex: number }) => {\n    history.push(`/ticket/${ticketsData[cellMeta.dataIndex][7]}`);\n  };\n\n  const columns = [\n    {\n      name: 'title',\n      label: 'Title',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'description',\n      label: 'Description',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'createdBy',\n      label: 'Created By',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: 'assignedTo',\n      label: 'Assigned To',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: 'status',\n      label: 'Status',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: 'priority',\n      label: 'Priority',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: 'dueDate',\n      label: 'Due Date',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <MUIDataTable\n        title='All Tickets'\n        data={ticketsData}\n        columns={columns}\n        options={{\n          filterType: 'multiselect',\n          print: false,\n          download: false,\n          rowsPerPageOptions: [5, 10, 20, 50],\n          onRowClick: onTicketRowClick,\n        }}\n      />\n      <Tooltip title='New Ticket'>\n        <Fab className={classes.addFab}\n          aria-label='add'\n          color='primary'\n          onClick={() => history.push('/ticket/new')}>\n          <AddIcon />\n        </Fab>\n      </Tooltip>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport {\n  Button,\n  CircularProgress,\n  Grid,\n  Typography,\n  InputLabel,\n  FormControl,\n  TextField,\n  Select,\n  MenuItem,\n  Paper,\n  makeStyles,\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { Autocomplete } from '@material-ui/lab';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery, useMutation, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport IUser from '../../interfaces/User';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport { IRootReducer } from '../../redux/IRootReducer';\n\nconst useStyles = makeStyles((theme) => ({\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  title: {\n    textAlign: 'center',\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n  progress: {\n    color: '#FFFFFF',\n  }\n}));\n\nexport default function NewTicketView() {\n  const [techniciansList, setTechniciansList] = useState<IUser[] | []>([]);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [assignedTo, setAssignedTo] = useState('');\n  const [status, setStatus] = useState('');\n  const [priority, setPriority] = useState('');\n  const [dueDate, setDueDate] = useState<Date | undefined>(undefined);\n\n  const currentUser: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user);\n\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const technicianListQuery = gql`\n    query {\n      getTechnicians {\n        uid\n        firstName\n        lastName\n        email\n      }\n    }\n  `;\n\n  const { loading: loadingTechniciansList } = useQuery(technicianListQuery, {\n    onCompleted: (data: { getTechnicians: IUser[] }) => {\n      const { uid, firstName, lastName, email } = currentUser;\n      const technicianList = [...data.getTechnicians, { uid, firstName, lastName, email }];\n      setTechniciansList(technicianList);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const newTicketMutation = gql`\n    mutation NewTicket(\n      $title: String!,\n      $description: String,\n      $assignedTo: String,\n      $status: String,\n      $priority: Int!,\n      $dueDate: String\n    ) {\n      newTicket(\n        title: $title,\n        description: $description,\n        assignedTo: $assignedTo,\n        status: $status,\n        priority: $priority,\n        dueDate: $dueDate\n      ) {\n        ticketId\n      }\n    }\n  `;\n  const [addNewTicket, { loading: addTicketLoading }] = useMutation(newTicketMutation, {\n    onCompleted: () => {\n      history.goBack();\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const handleNewTicket = () => {\n    addNewTicket({\n      variables: {\n        title,\n        description,\n        assignedTo,\n        status,\n        priority,\n        dueDate: dueDate?.toISOString(),\n      }\n    });\n  };\n\n  const statuses = ['new', 'pending', 'started', 'in progress', 'done', 'deleted', 'archived'];\n  const statusLabels = ['New', 'Pending', 'Started', 'In Progress', 'Done', 'Deleted', 'Archived'];\n  const priorities = [1, 2, 3, 4, 5];\n\n  return (\n    <React.Fragment>\n      <div className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography className={classes.title} variant='h4' gutterBottom>\n            New Ticket Details\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField required\n                variant='outlined'\n                id='title'\n                name='title'\n                label='Title'\n                value={title}\n                onChange={(event) => setTitle(event.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                id='description'\n                name='description'\n                label='Description'\n                rows={6}\n                value={description}\n                onChange={(event) => setDescription(event.target.value)}\n                multiline\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='status-label'>Status</InputLabel>\n                <Select required\n                  id='status'\n                  name='status'\n                  labelId='status-label'\n                  label='Status'\n                  defaultValue='new'\n                  value={status}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setStatus(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    statuses.map((stat, index) => {\n                      return (\n                        <MenuItem key={index} value={stat}>\n                          {statusLabels[index]}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='priority-label'>Priority</InputLabel>\n                <Select required\n                  id='priority'\n                  name='priority'\n                  labelId='priority-label'\n                  label='Priority'\n                  value={priority}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setPriority(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    priorities.map((priority, index) => {\n                      return (\n                        <MenuItem key={index} value={priority}>\n                          {priority}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Autocomplete\n                fullWidth\n                autoSelect\n                autoHighlight\n                loading={loadingTechniciansList}\n                id='status-combo-box'\n                onChange={(_: any, value: any) => setAssignedTo(value.uid)}\n                options={techniciansList}\n                getOptionLabel={(option: IUser) => `${option.firstName} ${option.lastName}`}\n                renderInput={(params) => <TextField\n                  {...params}\n                  variant='outlined'\n                  id='assignedTo'\n                  name='assignedTo'\n                  label='Assigned To'\n                  fullWidth\n                />}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  fullWidth\n                  disableToolbar\n                  minDate={new Date()}\n                  minDateMessage='Oh no! This ticket is overdue'\n                  emptyLabel='No Due Date'\n                  variant='inline'\n                  inputVariant='outlined'\n                  format='MM/dd/yyyy'\n                  margin='none'\n                  id='date-picker-inline'\n                  label='Due Date'\n                  value={dueDate}\n                  onChange={(date: any) => setDueDate(date)}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </Grid>\n          </Grid>\n          <div className={classes.buttons}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              onClick={handleNewTicket}\n            >\n              {addTicketLoading ? <CircularProgress className={classes.progress} /> : 'Save'}\n            </Button>\n          </div>\n        </Paper>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Button,\n  CircularProgress,\n  Grid,\n  Typography,\n  InputLabel,\n  FormControl,\n  TextField,\n  Select,\n  MenuItem,\n  Paper,\n  makeStyles,\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { Autocomplete } from '@material-ui/lab';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useQuery, useMutation, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport { IRootReducer } from '../../redux/IRootReducer';\nimport IUser from '../../interfaces/User';\nimport ITicket from '../../interfaces/Ticket';\n\nconst useStyles = makeStyles((theme) => ({\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  title: {\n    textAlign: 'center',\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n  progress: {\n    color: '#FFFFFF',\n  }\n}));\n\nexport default function TicketDetailView() {\n  const [techniciansList, setTechniciansList] = useState<IUser[] | []>([]);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [assignedToUid, setAssignedToUid] = useState('');\n  const [status, setStatus] = useState('');\n  const [priority, setPriority] = useState('');\n  const [dueDate, setDueDate] = useState<Date | undefined>(undefined);\n\n  const { ticketId } = useParams();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const currentUser: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user);\n\n  const ticketQuery = gql`\n    query GetATicket($ticketId: ID!) {\n      getATicket(ticketId: $ticketId) {\n        title\n        description\n        assignedTo {\n          uid\n          firstName\n          lastName\n          email\n        }\n        status\n        priority\n        dueDate\n      }\n    }\n  `;\n  const { refetch: refetchTicketData, loading: loadingTicketData } = useQuery(ticketQuery, {\n    variables: {\n      ticketId,\n    },\n    onCompleted: (data: { getATicket: ITicket }) => {\n      setTitle(data.getATicket?.title ?? '');\n      setDescription(data.getATicket?.description ?? '');\n      setAssignedToUid(data.getATicket?.assignedTo?.uid ?? '');\n      setStatus(data.getATicket?.status ?? 'new');\n      setPriority(data.getATicket?.priority?.toString() ?? '5');\n      setDueDate(new Date(data.getATicket?.dueDate ?? ''));\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  useEffect(() => {\n    refetchTicketData();\n  }, [ticketId]);\n\n  const technicianListQuery = gql`\n    query {\n      getTechnicians {\n        uid\n        firstName\n        lastName\n        email\n      }\n    }\n  `;\n  const { loading: loadingTechniciansList } = useQuery(technicianListQuery, {\n    onCompleted: (data: { getTechnicians: IUser[] }) => {\n      const { uid, firstName, lastName, email } = currentUser;\n      const technicianList = [...data.getTechnicians, { uid, firstName, lastName, email }];\n      setTechniciansList(technicianList);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const updateTicketMutation = gql`\n    mutation UpdateTicket(\n      $ticketId: ID!,\n      $title: String!,\n      $description: String,\n      $assignedTo: String,\n      $status: String,\n      $priority: Int!,\n      $dueDate: String\n    ) {\n      updateTicket(\n        ticketId: $ticketId,\n        title: $title,\n        description: $description,\n        assignedTo: $assignedTo,\n        status: $status,\n        priority: $priority,\n        dueDate: $dueDate\n      ) {\n        ticketId\n      }\n    }\n  `;\n  const [updateTicket, { loading: updateTicketLoading }] = useMutation(updateTicketMutation, {\n    onCompleted: () => {\n      history.goBack();\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const handleTicketUpdate = () => {\n    updateTicket({\n      variables: {\n        ticketId,\n        title,\n        description,\n        assignedTo: assignedToUid,\n        status,\n        priority,\n        dueDate: dueDate?.toISOString(),\n      }\n    });\n  };\n\n  const getAssignedToData = () => {\n    if (!loadingTicketData && !loadingTechniciansList) {\n      return techniciansList.find((user) => user.uid === assignedToUid);\n    } else {\n      return null;\n    }\n  };\n\n  const statuses = ['new', 'pending', 'started', 'in progress', 'done', 'deleted', 'archived'];\n  const statusLabels = ['New', 'Pending', 'Started', 'In Progress', 'Done', 'Deleted', 'Archived'];\n  const priorities = [1, 2, 3, 4, 5];\n\n  return (\n    <React.Fragment>\n      <div className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography className={classes.title} variant='h4' gutterBottom>\n            Ticket Details\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField required\n                variant='outlined'\n                id='title'\n                name='title'\n                label='Title'\n                value={title}\n                onChange={(event) => setTitle(event.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                id='description'\n                name='description'\n                label='Description'\n                rows={6}\n                value={description}\n                onChange={(event) => setDescription(event.target.value)}\n                multiline\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='status-label'>Status</InputLabel>\n                <Select required\n                  id='status'\n                  name='status'\n                  labelId='status-label'\n                  label='Status'\n                  defaultValue='new'\n                  value={status}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setStatus(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    statuses.map((stat, index) => {\n                      return (\n                        <MenuItem key={index} value={stat}>\n                          {statusLabels[index]}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='priority-label'>Priority</InputLabel>\n                <Select required\n                  id='priority'\n                  name='priority'\n                  labelId='priority-label'\n                  label='Priority'\n                  value={priority}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setPriority(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    priorities.map((priority, index) => {\n                      return (\n                        <MenuItem key={index} value={priority}>\n                          {priority}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Autocomplete\n                fullWidth\n                autoSelect\n                autoHighlight\n                loading={loadingTechniciansList}\n                id='status-combo-box'\n                onChange={(_: any, value: any) => setAssignedToUid(value.uid)}\n                options={techniciansList}\n                getOptionLabel={(option: IUser) => `${option.firstName} ${option.lastName}`}\n                value={getAssignedToData()}\n                renderInput={(params) => <TextField\n                  {...params}\n                  variant='outlined'\n                  id='assignedTo'\n                  name='assignedTo'\n                  label='Assigned To'\n                  fullWidth\n                />}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  fullWidth\n                  disableToolbar\n                  minDate={new Date()}\n                  minDateMessage='Oh no! This ticket is overdue'\n                  emptyLabel='No Due Date'\n                  invalidLabel='Testing'\n                  variant='inline'\n                  inputVariant='outlined'\n                  format='MM/dd/yyyy'\n                  margin='none'\n                  id='date-picker-inline'\n                  label='Due Date'\n                  value={dueDate}\n                  onChange={(date: any) => setDueDate(date)}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </Grid>\n          </Grid>\n          <div className={classes.buttons}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              onClick={handleTicketUpdate}\n            >\n              {updateTicketLoading ? <CircularProgress className={classes.progress} /> : 'Update'}\n            </Button>\n          </div>\n        </Paper>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport MUIDataTable from 'mui-datatables';\nimport { Fab, Tooltip, makeStyles } from '@material-ui/core';\nimport { Add as AddIcon } from '@material-ui/icons';\nimport { useQuery, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport ITask from '../../interfaces/Task';\nimport IUser from '../../interfaces/User';\nimport { IRootReducer } from '../../redux/IRootReducer';\n\nconst useStyles = makeStyles((theme) => ({\n  addFab: {\n    margin: theme.spacing(1),\n    top: 'auto',\n    right: 20,\n    bottom: 20,\n    left: 'auto',\n    position: 'absolute',\n  }  \n}));\n\nexport default function TasksView() {\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const [tasksData, setTasksData] = useState<string[][]>([]);\n  const { uid }: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user) || {};\n\n  const getTasksQuery = gql`\n    query {\n      getTasks {\n        taskId\n        title\n        description\n        createdBy {\n          uid\n          firstName\n          lastName\n        }\n        assignedTo {\n          uid\n          firstName\n          lastName\n        }\n        status\n        priority\n        dueDate\n      }\n    }\n  `;\n\n  const { refetch } = useQuery(getTasksQuery, {\n    onCompleted: (data: { getTasks: ITask[] }) => {\n      const formattedData = data?.getTasks?.map((task: ITask) => {\n        let dueDate = 'No Date';\n        try {\n          dueDate = Intl.DateTimeFormat('en-US').format(new Date(task.dueDate || '')).toString();\n        } catch (err) {\n          dueDate = 'No Date';\n        }\n        return [\n          task.title ? `${task.title?.substring(0, 40)}${task.title?.length > 40 ? '...' : ''}` : '',\n          task.description ? `${task.description?.substring(0, 80)}${task.description?.length > 80 ? '...' : ''}` : '',\n          task.createdBy ? `${task.createdBy?.firstName} ${task.createdBy?.lastName}` : '',\n          task.assignedTo ? `${task.assignedTo?.firstName} ${task.assignedTo?.lastName}` : '',\n          task.status || 'N/A',\n          task.priority?.toString() || 'N/A',\n          dueDate,\n          task.taskId || '',\n        ];\n      });\n      setTasksData(formattedData);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [uid]);\n\n  const onTaskRowClick = (_data: string[], cellMeta: { dataIndex: number; rowIndex: number }) => {\n    history.push(`/task/${tasksData[cellMeta.dataIndex][7]}`);\n  };\n\n  const columns = [\n    {\n      name: 'title',\n      label: 'Title',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'description',\n      label: 'Description',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'createdBy',\n      label: 'Created By',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: 'assignedTo',\n      label: 'Assigned To',\n      options: {\n        filter: true,\n        sort: true\n      }\n    },\n    {\n      name: 'status',\n      label: 'Status',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: 'priority',\n      label: 'Priority',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    },\n    {\n      name: 'dueDate',\n      label: 'Due Date',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <MUIDataTable\n        title='All Tasks'\n        data={tasksData}\n        columns={columns}\n        options={{\n          filterType: 'multiselect',\n          print: false,\n          download: false,\n          rowsPerPageOptions: [5, 10, 20, 50],\n          onRowClick: onTaskRowClick,\n        }}\n      />\n      <Tooltip title='New Task'>\n        <Fab className={classes.addFab}\n          aria-label='add'\n          color='primary'\n          onClick={() => history.push('/task/new')}>\n          <AddIcon />\n        </Fab>\n      </Tooltip>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  CircularProgress,\n  Grid,\n  Typography,\n  InputLabel,\n  FormControl,\n  TextField,\n  Select,\n  MenuItem,\n  Paper,\n  makeStyles,\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { Autocomplete } from '@material-ui/lab';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery, useMutation, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport IUser from '../../interfaces/User';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport { IRootReducer } from '../../redux/IRootReducer';\n\nconst useStyles = makeStyles((theme) => ({\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  title: {\n    textAlign: 'center',\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n  progress: {\n    color: '#FFFFFF',\n  }\n}));\n\nexport default function NewTaskView() {\n  const [techniciansList, setTechniciansList] = useState<IUser[] | []>([]);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [assignedTo, setAssignedTo] = useState('');\n  const [status, setStatus] = useState('');\n  const [priority, setPriority] = useState('');\n  const [dueDate, setDueDate] = useState<Date | undefined>(undefined);\n\n  const currentUser: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user);\n\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const technicianListQuery = gql`\n    query {\n      getTechnicians {\n        uid\n        firstName\n        lastName\n        email\n      }\n    }\n  `;\n\n  const { loading: loadingTechniciansList } = useQuery(technicianListQuery, {\n    onCompleted: (data: { getTechnicians: IUser[] }) => {\n      const { uid, firstName, lastName, email } = currentUser;\n      const technicianList = [...data.getTechnicians, { uid, firstName, lastName, email }];\n      setTechniciansList(technicianList);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const newTaskMutation = gql`\n    mutation NewTask(\n      $title: String!,\n      $description: String,\n      $assignedTo: String,\n      $status: String,\n      $priority: Int!,\n      $dueDate: String\n    ) {\n      newTask(\n        title: $title,\n        description: $description,\n        assignedTo: $assignedTo,\n        status: $status,\n        priority: $priority,\n        dueDate: $dueDate\n      ) {\n        taskId\n      }\n    }\n  `;\n  const [addNewTask, { loading: addTaskLoading }] = useMutation(newTaskMutation, {\n    onCompleted: () => {\n      history.goBack();\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const handleNewTask = () => {\n    addNewTask({\n      variables: {\n        title,\n        description,\n        assignedTo,\n        status,\n        priority,\n        dueDate: dueDate?.toISOString(),\n      }\n    });\n  };\n\n  const statuses = ['new', 'pending', 'started', 'in progress', 'done', 'deleted', 'archived'];\n  const statusLabels = ['New', 'Pending', 'Started', 'In Progress', 'Done', 'Deleted', 'Archived'];\n  const priorities = [1, 2, 3, 4, 5];\n\n  return (\n    <React.Fragment>\n      <div className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography className={classes.title} variant='h4' gutterBottom>\n            New Task\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField required\n                variant='outlined'\n                id='title'\n                name='title'\n                label='Title'\n                value={title}\n                onChange={(event) => setTitle(event.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                id='description'\n                name='description'\n                label='Description'\n                rows={6}\n                value={description}\n                onChange={(event) => setDescription(event.target.value)}\n                multiline\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='status-label'>Status</InputLabel>\n                <Select required\n                  id='status'\n                  name='status'\n                  labelId='status-label'\n                  label='Status'\n                  defaultValue='new'\n                  value={status}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setStatus(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    statuses.map((stat, index) => {\n                      return (\n                        <MenuItem key={index} value={stat}>\n                          {statusLabels[index]}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='priority-label'>Priority</InputLabel>\n                <Select required\n                  id='priority'\n                  name='priority'\n                  labelId='priority-label'\n                  label='Priority'\n                  value={priority}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setPriority(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    priorities.map((priority, index) => {\n                      return (\n                        <MenuItem key={index} value={priority}>\n                          {priority}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Autocomplete\n                fullWidth\n                autoSelect\n                autoHighlight\n                loading={loadingTechniciansList}\n                id='status-combo-box'\n                onChange={(_: any, value: any) => setAssignedTo(value.uid)}\n                options={techniciansList}\n                getOptionLabel={(option: IUser) => `${option.firstName} ${option.lastName}`}\n                renderInput={(params) => <TextField\n                  {...params}\n                  variant='outlined'\n                  id='assignedTo'\n                  name='assignedTo'\n                  label='Assigned To'\n                  fullWidth\n                />}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  fullWidth\n                  disableToolbar\n                  minDate={new Date()}\n                  minDateMessage='Oh no! This task is overdue'\n                  emptyLabel='No Due Date'\n                  variant='inline'\n                  inputVariant='outlined'\n                  format='MM/dd/yyyy'\n                  margin='none'\n                  id='date-picker-inline'\n                  label='Due Date'\n                  value={dueDate}\n                  onChange={(date: any) => setDueDate(date)}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </Grid>\n          </Grid>\n          <div className={classes.buttons}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              onClick={handleNewTask}\n            >\n              {addTaskLoading ? <CircularProgress className={classes.progress} /> : 'Save'}\n            </Button>\n          </div>\n        </Paper>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Button,\n  CircularProgress,\n  Grid,\n  Typography,\n  InputLabel,\n  FormControl,\n  TextField,\n  Select,\n  MenuItem,\n  Paper,\n  makeStyles,\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { Autocomplete } from '@material-ui/lab';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useQuery, useMutation, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport { IRootReducer } from '../../redux/IRootReducer';\nimport IUser from '../../interfaces/User';\nimport ITask from '../../interfaces/Task';\n\nconst useStyles = makeStyles((theme) => ({\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  title: {\n    textAlign: 'center',\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n  progress: {\n    color: '#FFFFFF',\n  }\n}));\n\nexport default function TaskDetailView() {\n  const [techniciansList, setTechniciansList] = useState<IUser[] | []>([]);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [assignedToUid, setAssignedToUid] = useState('');\n  const [status, setStatus] = useState('');\n  const [priority, setPriority] = useState('');\n  const [dueDate, setDueDate] = useState<Date | undefined>(undefined);\n\n  const { taskId } = useParams();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const currentUser: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user);\n\n  const taskQuery = gql`\n    query GetATask($taskId: ID!) {\n      getATask(taskId: $taskId) {\n        title\n        description\n        assignedTo {\n          uid\n          firstName\n          lastName\n          email\n        }\n        status\n        priority\n        dueDate\n      }\n    }\n  `;\n  const { refetch: refetchTaskData, loading: loadingTaskData } = useQuery(taskQuery, {\n    variables: {\n      taskId,\n    },\n    onCompleted: (data: { getATask: ITask }) => {\n      setTitle(data.getATask?.title ?? '');\n      setDescription(data.getATask?.description ?? '');\n      setAssignedToUid(data.getATask?.assignedTo?.uid ?? '');\n      setStatus(data.getATask?.status ?? 'new');\n      setPriority(data.getATask?.priority?.toString() ?? '5');\n      setDueDate(new Date(data.getATask?.dueDate ?? ''));\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  useEffect(() => {\n    refetchTaskData();\n  }, [taskId]);\n\n  const technicianListQuery = gql`\n    query {\n      getTechnicians {\n        uid\n        firstName\n        lastName\n        email\n      }\n    }\n  `;\n  const { loading: loadingTechniciansList } = useQuery(technicianListQuery, {\n    onCompleted: (data: { getTechnicians: IUser[] }) => {\n      const { uid, firstName, lastName, email } = currentUser;\n      const technicianList = [...data.getTechnicians, { uid, firstName, lastName, email }];\n      setTechniciansList(technicianList);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const updateTaskMutation = gql`\n    mutation UpdateTask(\n      $taskId: ID!,\n      $title: String!,\n      $description: String,\n      $assignedTo: String,\n      $status: String,\n      $priority: Int!,\n      $dueDate: String\n    ) {\n      updateTask(\n        taskId: $taskId,\n        title: $title,\n        description: $description,\n        assignedTo: $assignedTo,\n        status: $status,\n        priority: $priority,\n        dueDate: $dueDate\n      ) {\n        taskId\n      }\n    }\n  `;\n  const [updateTask, { loading: updateTaskLoading }] = useMutation(updateTaskMutation, {\n    onCompleted: () => {\n      history.goBack();\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    }\n  });\n\n  const handleTaskUpdate = () => {\n    updateTask({\n      variables: {\n        taskId,\n        title,\n        description,\n        assignedTo: assignedToUid,\n        status,\n        priority,\n        dueDate: dueDate?.toISOString(),\n      }\n    });\n  };\n\n  const getAssignedToData = () => {\n    if (!loadingTaskData && !loadingTechniciansList) {\n      return techniciansList.find((user) => user.uid === assignedToUid);\n    } else {\n      return null;\n    }\n  };\n\n  const statuses = ['new', 'pending', 'started', 'in progress', 'done', 'deleted', 'archived'];\n  const statusLabels = ['New', 'Pending', 'Started', 'In Progress', 'Done', 'Deleted', 'Archived'];\n  const priorities = [1, 2, 3, 4, 5];\n\n  return (\n    <React.Fragment>\n      <div className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography className={classes.title} variant='h4' gutterBottom>\n            Task Details\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField required\n                variant='outlined'\n                id='title'\n                name='title'\n                label='Title'\n                value={title}\n                onChange={(event) => setTitle(event.target.value)}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                id='description'\n                name='description'\n                label='Description'\n                rows={6}\n                value={description}\n                onChange={(event) => setDescription(event.target.value)}\n                multiline\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='status-label'>Status</InputLabel>\n                <Select required\n                  id='status'\n                  name='status'\n                  labelId='status-label'\n                  label='Status'\n                  defaultValue='new'\n                  value={status}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setStatus(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    statuses.map((stat, index) => {\n                      return (\n                        <MenuItem key={index} value={stat}>\n                          {statusLabels[index]}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth variant='outlined'>\n                <InputLabel id='priority-label'>Priority</InputLabel>\n                <Select required\n                  id='priority'\n                  name='priority'\n                  labelId='priority-label'\n                  label='Priority'\n                  value={priority}\n                  onChange={(event: React.ChangeEvent<{ value: unknown }>) => setPriority(event.target.value as string)}\n                  fullWidth\n                >\n                  {\n                    priorities.map((priority, index) => {\n                      return (\n                        <MenuItem key={index} value={priority}>\n                          {priority}\n                        </MenuItem>\n                      );\n                    })\n                  }\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Autocomplete\n                fullWidth\n                autoSelect\n                autoHighlight\n                loading={loadingTechniciansList}\n                id='status-combo-box'\n                onChange={(_: any, value: any) => setAssignedToUid(value.uid)}\n                options={techniciansList}\n                getOptionLabel={(option: IUser) => `${option.firstName} ${option.lastName}`}\n                value={getAssignedToData()}\n                renderInput={(params) => <TextField\n                  {...params}\n                  variant='outlined'\n                  id='assignedTo'\n                  name='assignedTo'\n                  label='Assigned To'\n                  fullWidth\n                />}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <KeyboardDatePicker\n                  fullWidth\n                  disableToolbar\n                  minDate={new Date()}\n                  minDateMessage='Oh no! This task is overdue'\n                  emptyLabel='No Due Date'\n                  invalidLabel='Testing'\n                  variant='inline'\n                  inputVariant='outlined'\n                  format='MM/dd/yyyy'\n                  margin='none'\n                  id='date-picker-inline'\n                  label='Due Date'\n                  value={dueDate}\n                  onChange={(date: any) => setDueDate(date)}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />\n              </MuiPickersUtilsProvider>\n            </Grid>\n          </Grid>\n          <div className={classes.buttons}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              onClick={handleTaskUpdate}\n            >\n              {updateTaskLoading ? <CircularProgress className={classes.progress} /> : 'Update'}\n            </Button>\n          </div>\n        </Paper>\n      </div>\n    </React.Fragment>\n  );\n}\n","import React, { useState } from 'react';\nimport Axios from 'axios';\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  SwipeableDrawer,\n  Typography,\n  Tooltip,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Menu as MenuIcon,\n  Brightness7 as Brightness7Icon,\n  Brightness4 as Brightness4Icon,\n  ExitToApp as ExitToAppIcon,\n  AccountCircle as AccountCircleIcon,\n  People as PeopleIcon,\n  Dashboard as DashboardIcon,\n  AssignmentLate as AssignmentLateIcon,\n  FormatListBulleted as TasksIcon,\n  SupervisorAccount as SupervisorAccountIcon,\n  MarkunreadMailbox as MarkunreadMailboxIcon,\n} from '@material-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { useDispatch,  useSelector } from 'react-redux';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport { IRootReducer } from '../../redux/IRootReducer';\nimport IUser from '../../interfaces/User';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    '&:hover': {\n      cursor: 'pointer',\n    }\n  },\n  iconButton: {\n    color: '#FFFFFF',\n    margin: theme.spacing(0.5),\n  },\n  sideNav: {\n    width: '320px',\n  },\n  routerLink: {\n    color: 'inherit',\n    textDecoration: 'none',\n  },\n}));\n\nexport default function Navbar() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { isTechnician }: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user) || {};\n\n  const [menuIsOpen, setmenuIsOpen] = useState(false);\n  const [theme] = useState(localStorage.getItem('theme') || 'light');\n\n  function toggleTheme() {\n    const currentTheme = localStorage.getItem('theme');\n    if (currentTheme === 'dark') {\n      localStorage.setItem('theme', 'light');\n    } else {\n      localStorage.setItem('theme', 'dark');\n    }\n    window.location.reload();\n  }\n\n  async function handleLogout() {\n    await Axios.post('/api/user/logout');\n    localStorage.setItem('authed', 'false');\n    dispatch(changeAuthed(false));\n    window.location.reload();\n  }\n\n  const handleToggleMenu = () => {\n    menuIsOpen ? setmenuIsOpen(false) : setmenuIsOpen(true);\n  };\n\n  const sideNav = (\n    <div className={classes.sideNav}\n      role='presentation'\n      onClick={handleToggleMenu}\n      onKeyDown={handleToggleMenu}>\n      <List>\n        <Link to='/dashboard' className={classes.routerLink}>\n          <ListItem button>\n            <ListItemIcon className='drawer-icon'>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary='Dashboard' />\n          </ListItem>\n        </Link>\n        <Link to='/tickets' className={classes.routerLink}>\n          <ListItem button>\n            <ListItemIcon className='drawer-icon'>\n              <AssignmentLateIcon />\n            </ListItemIcon>\n            <ListItemText primary='Tickets' />\n          </ListItem>\n        </Link>\n        <Link to='/tasks' className={classes.routerLink}>\n          <ListItem button>\n            <ListItemIcon className='drawer-icon'>\n              <TasksIcon />\n            </ListItemIcon>\n            <ListItemText primary='Tasks List' />\n          </ListItem>\n        </Link>\n        {\n          isTechnician ? <Link to='/clients' className={classes.routerLink}>\n            <ListItem button>\n              <ListItemIcon className='drawer-icon'>\n                <PeopleIcon />\n              </ListItemIcon>\n              <ListItemText primary='Clients' />\n            </ListItem>\n          </Link> : null\n        }\n        <Link to='/technicians' className={classes.routerLink}>\n          <ListItem button>\n            <ListItemIcon className='drawer-icon'>\n              <SupervisorAccountIcon />\n            </ListItemIcon>\n            <ListItemText primary='Technicians' />\n          </ListItem>\n        </Link>\n        <Link to='/requests' className={classes.routerLink}>\n          <ListItem button>\n            <ListItemIcon className='drawer-icon'>\n              <MarkunreadMailboxIcon />\n            </ListItemIcon>\n            <ListItemText primary='Requests' />\n          </ListItem>\n        </Link>\n        <Link to='/profile' className={classes.routerLink}>\n          <ListItem button>\n            <ListItemIcon className='drawer-icon'>\n              <AccountCircleIcon />\n            </ListItemIcon>\n            <ListItemText primary='My Profile' />\n          </ListItem>\n        </Link>\n      </List>\n    </div>\n  );\n\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <Tooltip title='Menu'>\n          <IconButton edge='start' className={classes.menuButton} onClick={handleToggleMenu} color='inherit' aria-label='menu'>\n            <MenuIcon />\n          </IconButton>\n        </Tooltip>\n        <SwipeableDrawer open={menuIsOpen} onOpen={handleToggleMenu} onClose={handleToggleMenu} className={'side-drawer'}>\n          {sideNav}\n        </SwipeableDrawer>\n        <Typography variant='h6' className={classes.title}>\n          <Tooltip title='Go to Dashboard' placement='bottom-start'>\n            <Link to='/dashboard' className={classes.routerLink}>HelpDesk</Link>\n          </Tooltip>\n        </Typography>\n        <Tooltip title={theme === 'dark' ? 'Light Mode' : 'Dark Mode'}>\n          <IconButton edge='start' className={classes.iconButton} onClick={toggleTheme}>\n            {theme === 'dark' ? <Brightness7Icon /> : <Brightness4Icon />}\n          </IconButton>\n        </Tooltip>\n        <Tooltip title='Log Out'>\n          <IconButton edge='start' className={classes.iconButton} onClick={handleLogout}>\n            <ExitToAppIcon />\n          </IconButton>\n        </Tooltip>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React from 'react';\nimport { Typography, Button, makeStyles } from '@material-ui/core';\nimport travolta from '../../assets/confused_travolta.gif';\n\nconst useStyles = makeStyles((theme) => ({\n  goHomeButton: {\n    margin: theme.spacing(2),\n  }\n}));\n\nexport default function NotFound() {\n  const classes = useStyles();\n  return (\n    <div style={{textAlign: 'center', padding: '20px'}}>\n      <Typography variant='h3' component='h3' color='textPrimary' style={{ zIndex: 0 }}>404</Typography>\n      <Typography variant='h4' component='h4' color='textPrimary' style={{ zIndex: 0 }}>Page Not Found</Typography>\n      <Button variant='contained' color='primary' className={classes.goHomeButton} href='/'>Go Home</Button>\n      <img style={{position: 'fixed', left: 'calc(50% - 238px)', bottom: '0px', zIndex: 1 }} src={travolta} alt=\"Sorry...\" />\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport Axios from 'axios';\nimport {\n  Button,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n  FormLabel,\n  FormControl,\n  RadioGroup,\n  Radio,\n  Snackbar,\n  Container,\n  FormControlLabel,\n  Link,\n  makeStyles,\n} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Avatar from '@material-ui/core/Avatar';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    float: 'right',\n  },\n}));\n\nexport default function SignUp() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n  const [firstName, setFirstName] = useState('');\n  const [middleName, setMiddleName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [phone, setPhone] = useState('');\n  const [company, setCompany] = useState('');\n  const [isTechnician, setIsTechnician] = useState<boolean>(false);\n  const [errorSnackbarIsOpen, setErrorSnackbarIsOpen] = useState<boolean>(false);\n\n  const handleIsTechnician = (event: any) => {\n    setIsTechnician(event.target.value === 'true');\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    // TODO::verify user inputs\n    e.preventDefault();\n    try {\n      const signUpData = {\n        firstName,\n        middleName,\n        lastName,\n        email,\n        password,\n        phone,\n        company,\n        isTechnician,\n      };\n      const res = await Axios.post('/api/user/signup', signUpData);\n      localStorage.setItem('authed', (res.status === 200).toString());\n      dispatch(changeAuthed(res.status === 200));\n      if (res.status === 200) {\n        history.push('/dashboard');\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorSnackbarIsOpen(true);\n    }\n  };\n  \n  return (\n    <Container component='main' maxWidth='md'>\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component='h1' variant='h5'>\n          Sign up\n        </Typography>\n        <form className={classes.form} onSubmit={handleSignUp} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={4}>\n              <TextField autoFocus\n                name='firstName'\n                variant='outlined'\n                required\n                fullWidth\n                id='firstName'\n                label='First Name'\n                type='name'\n                autoComplete='given-name'\n                value={firstName}\n                onChange={(event: any) => setFirstName(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                variant='outlined'\n                name='middleName'\n                fullWidth\n                id='middleName'\n                label='Middle Name (Optional)'\n                type='name'\n                autoComplete='additional-name'\n                value={middleName}\n                onChange={(event: any) => setMiddleName(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                variant='outlined'\n                name='lastName'\n                required\n                fullWidth\n                id='lastName'\n                label='Last Name'\n                type='name'\n                autoComplete='family-name'\n                value={lastName}\n                onChange={(event: any) => setLastName(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant='outlined'\n                required\n                fullWidth\n                id='email'\n                label='Email Address'\n                name='email'\n                autoComplete='email'\n                type='email'\n                value={email}\n                onChange={(event: any) => setEmail(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant='outlined'\n                required\n                fullWidth\n                name='password'\n                label='Password'\n                type='password'\n                id='password'\n                autoComplete='current-password'\n                value={password}\n                onChange={(event: any) => setPassword(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant='outlined'\n                required\n                fullWidth\n                name='confirm-password'\n                label='Confirm Password'\n                type='password'\n                id='password-repeat'\n                autoComplete='current-password'\n                value={confirmPassword}\n                onChange={(event: any) => setConfirmPassword(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant='outlined'\n                fullWidth\n                name='phone'\n                label='Phone Number (Optional)'\n                type='tel'\n                id='phone'\n                autoComplete='tel'\n                value={phone}\n                onChange={(event: any) => setPhone(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant='outlined'\n                fullWidth\n                name='company'\n                label='Company (Optional)'\n                type='name'\n                id='company'\n                autoComplete='organization'\n                value={company}\n                onChange={(event: any) => setCompany(event.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl component='fieldset'>\n                <FormLabel component='legend'>Are You a Technician?</FormLabel>\n                <RadioGroup aria-label='isTechnician' name='isTechnician' value={isTechnician} onChange={handleIsTechnician}>\n                  <FormControlLabel value={true} control={<Radio color='primary'/>} label='Yes' />\n                  <FormControlLabel value={false} control={<Radio color='primary'/>} label='No' />\n                </RadioGroup>\n              </FormControl>\n            </Grid>\n          </Grid>\n          <Button\n            type='submit'\n            variant='contained'\n            color='primary'\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify='flex-end'>\n            <Grid item>\n              <Link href='/login' variant='body2'>\n                Already have an account? Log in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'right',\n          }}\n          open={errorSnackbarIsOpen}\n          autoHideDuration={3000}\n          onClose={() => setErrorSnackbarIsOpen(false)}\n          message='Error'\n          action={\n            <React.Fragment>\n              Unable to login, please try again.\n              <IconButton size='small' aria-label='close' color='inherit' onClick={() => setErrorSnackbarIsOpen(false)}>\n                <CloseIcon fontSize='small' />\n              </IconButton>\n            </React.Fragment>\n          }\n        />\n      </div>\n    </Container>\n  );\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport Axios from 'axios';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  IconButton,\n  FormControlLabel,\n  Grid,\n  Link,\n  Snackbar,\n  TextField,\n  Typography,\n  makeStyles,\n} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Avatar from '@material-ui/core/Avatar';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorSnackbarIsOpen, setErrorSnackbarIsOpen] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent ) => {\n    e.preventDefault();\n    try {\n      const loginData = { email, password };\n      const res = await Axios.post('/api/user/login', loginData);\n      localStorage.setItem('authed', (res.status === 200).toString());\n      dispatch(changeAuthed(res.status === 200));\n      if (res.status === 200) {\n        history.push('/dashboard');\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorSnackbarIsOpen(true);\n    }\n  };\n\n  return (\n    <Container component='main' maxWidth='xs'>\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component='h1' variant='h5'>\n          Sign in\n        </Typography>\n        <form className={classes.form} onSubmit={handleLogin} noValidate>\n          <TextField\n            variant='outlined'\n            margin='normal'\n            required\n            fullWidth\n            id='email'\n            label='Email Address'\n            name='email'\n            autoComplete='email'\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n            autoFocus\n          />\n          <TextField\n            variant='outlined'\n            margin='normal'\n            required\n            fullWidth\n            name='password'\n            label='Password'\n            type='password'\n            id='password'\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n            autoComplete='current-password'\n          />\n          <FormControlLabel\n            control={<Checkbox value='remember' color='primary' />}\n            label='Remember me'\n          />\n          <Button\n            fullWidth\n            type='submit'\n            variant='contained'\n            color='primary'\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href='#' variant='body2'>\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href='/signup' variant='body2'>\n                {'Don\\'t have an account? Sign Up'}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'right',\n          }}\n          open={errorSnackbarIsOpen}\n          autoHideDuration={3000}\n          onClose={() => setErrorSnackbarIsOpen(false)}\n          message='Error'\n          action={\n            <React.Fragment>\n              Unable to login, please try again.\n              <IconButton size='small' aria-label='close' color='inherit' onClick={() => setErrorSnackbarIsOpen(false)}>\n                <CloseIcon fontSize='small' />\n              </IconButton>\n            </React.Fragment>\n          }\n        />\n      </div>\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nfunction Alert(props: any) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function NoticeSnackbar(props: INoticeSnackbar) {\n\n  const [open, setOpen] = useState(props.open);\n\n  useEffect(() => {\n    setOpen(props.open);\n  }, [props]);\n\n  const handleClose = (_event: any, reason: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <Snackbar open={open} autoHideDuration={props.duration || 3000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={props.severity}>\n        { props.message }\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport interface INoticeSnackbar {\n  severity: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n  open?: boolean;\n  duration?: number | null | undefined;\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useQuery, useMutation, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  TextField,\n  Tooltip,\n  Fab,\n  makeStyles,\n} from '@material-ui/core';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport MUIDataTable from 'mui-datatables';\nimport IUser from '../../interfaces/User';\nimport { IRootReducer } from '../../redux/IRootReducer';\nimport NoticeSnackbar, { INoticeSnackbar } from '../NoticeSnackbar/NoticeSnackbar';\n\nconst useStyles = makeStyles((theme) => ({\n  addFab: {\n    margin: theme.spacing(1),\n    top: 'auto',\n    right: 20,\n    bottom: 20,\n    left: 'auto',\n    position: 'absolute',\n  }\n}));\n\nexport default function PeoplesView(props: IPeoplesViewProps) {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  \n  const { uid, isTechnician }: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user) || {};\n\n  const [peoplesListData, setPeoplesListData] = useState<string[][]>([]);\n  const [requestDialogOpen, setRequestDialogOpen] = useState<boolean>(false);\n  const [requestEmail, setRequestEmail] = useState<string>('');\n\n  // Snackbar states\n  const [snackbarMessage, setSnackbarMessage] = useState<string>('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'error' | 'warning' | 'info'>('info');\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const newRequestMutation = gql`\n    mutation NewRequest($recipientEmail: String!) {\n      newEmailRequest(recipientEmail: $recipientEmail) {\n        recipient {\n          uid\n          firstName\n          lastName\n          email\n        }\n      }\n    }\n  `;\n  const [sendRequest, { loading: requestLoading, error: requestError }] = useMutation(newRequestMutation, {\n    onCompleted: () => {\n      setSnackbarMessage('Request Sent');\n      setSnackbarSeverity('success');\n      setSnackbarOpen(true);\n      setRequestDialogOpen(false);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      } else {\n        setSnackbarMessage('Error: Bad Request');\n        setSnackbarSeverity('error');\n        setSnackbarOpen(true);\n      }\n    }\n  });\n\n  const getClientsQuery = gql`\n    query {\n      getClients {\n        uid\n        firstName\n        middleName\n        lastName\n        email\n        phone\n        company\n      }\n    }\n  `;\n  const getTechniciansQuery = gql`\n    query {\n      getTechnicians {\n        uid\n        firstName\n        middleName\n        lastName\n        email\n        phone\n        company\n      }\n    }\n  `;\n  const { refetch } = useQuery(props.show === 'clients' ? getClientsQuery : getTechniciansQuery, {\n    onCompleted: (data: { getClients?: IUser[]; getTechnicians?: IUser[] }) => {\n      const peopleData = props.show === 'clients' ? data?.getClients : data?.getTechnicians;\n      const formattedData = peopleData?.map((user: IUser): string[] => {\n        return [\n          user.firstName || '',\n          user.middleName || '',\n          user.lastName || '',\n          user.email || 'No Email',\n          user.phone || 'No Phone Number',\n          user.company || '',\n          user.isTechnician ? 'Yes' : 'No',\n        ];\n      });\n      setPeoplesListData(formattedData || []);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [uid]);\n\n  const columns = [\n    {\n      name: 'firstName',\n      label: 'First Name',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'middleName',\n      label: 'Middle Name',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'lastName',\n      label: 'Last Name',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'email',\n      label: 'Email',\n      options: {\n        filter: false,\n        sort: true,\n      }\n    },\n    {\n      name: 'phone',\n      label: 'Phone Number',\n      options: {\n        filter: false,\n        sort: false,\n      }\n    },\n    {\n      name: 'company',\n      label: 'Company',\n      options: {\n        filter: true,\n        sort: true,\n      }\n    }\n  ];\n\n  if (!isTechnician && props.show === 'clients') {\n    return (<Redirect to='/technicians' />);\n  } else {\n    return (\n      <div>\n        <MUIDataTable\n          data={peoplesListData}\n          columns={columns}\n          title={props.show === 'clients' ? 'Clients List' : 'Technicians List'}\n          options={{\n            filterType: 'multiselect',\n            print: false,\n            download: false,\n            rowsPerPageOptions: [5, 10, 20, 50],\n          }}\n        />\n        <NoticeSnackbar\n          severity={snackbarSeverity}\n          message={snackbarMessage}\n          open={snackbarOpen}\n        />\n        <Dialog open={requestDialogOpen} onClose={() => setRequestDialogOpen(false)} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Send {props.show === 'clients' ? 'Client' : 'Technician'} Request</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              To send a connection request, please enter your email address here. We will send your request.\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Email Address\"\n              type=\"email\"\n              value={requestEmail}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => setRequestEmail(event.target.value)}\n              fullWidth\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setRequestDialogOpen(false)} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={() => sendRequest({ variables: { recipientEmail: requestEmail }})} color=\"primary\">\n              Send Request\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Tooltip title={props.show === 'clients' ? 'Add Client' : 'Add Technician'}>\n          <Fab className={classes.addFab}\n            aria-label='add'\n            color='primary'\n            onClick={() => setRequestDialogOpen(true)}>\n            <PersonAddIcon />\n          </Fab>\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\ninterface IPeoplesViewProps {\n  show: 'clients' | 'technicians';\n}\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery, useMutation, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport {\n  Checkbox,\n  IconButton,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Tooltip,\n  Typography,\n  makeStyles,\n} from '@material-ui/core';\nimport {\n  DoneRounded as DoneIcon,\n  CloseRounded as CloseIcon\n} from '@material-ui/icons';\nimport IUser from '../../interfaces/User';\nimport IConnectionRequest from '../../interfaces/ConnectionRequest';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\nimport { IRootReducer } from '../../redux/IRootReducer';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  gridItem: {\n    width: '80vw',\n    maxWidth: 800,\n    padding: theme.spacing(1),\n  },\n  list: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  listItemButton: {\n    padding: theme.spacing(2),\n  }\n}));\n\nexport default function RequestsView() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const [checked, setChecked] = useState<IConnectionRequest[]>([]);\n  const [requestsData, setRequestsData] = useState<IConnectionRequest[]>([]);\n\n  const { uid }: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user) || {};\n\n  const getRequestsQuery = gql`\n    query {\n      getReceivedRequests {\n        requestId\n        requesterUid\n        requester {\n          uid\n          firstName\n          lastName\n          email\n          isTechnician\n        }\n      }\n    }\n  `;\n  const { refetch } = useQuery(getRequestsQuery, {\n    onCompleted: (data: { getReceivedRequests: IConnectionRequest[] }) => {\n      setRequestsData(data.getReceivedRequests);\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    },\n  });\n\n  const acceptRequestMutation = gql`\n    mutation AcceptRequest($requesterUid: String!) {\n      acceptRequest(requesterUid: $requesterUid) {\n        requestId\n        status\n      }\n    }\n  `;\n  const [acceptRequest, { loading: acceptRequestloading }] = useMutation(acceptRequestMutation, {\n    onCompleted: (data: { acceptRequest: IConnectionRequest }) => {\n      const deleteIndex = requestsData.findIndex((request) => request.requestId === data.acceptRequest.requestId);\n      if (deleteIndex >= 0) {\n        const arrayCopy = [...requestsData];\n        arrayCopy.splice(deleteIndex, 1);\n        setRequestsData(arrayCopy);\n      }\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [uid]);\n\n  const handleToggle = (value: any) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    setChecked(newChecked);\n  };\n\n  const handleAcceptRequest = (requesterUid?: string) => {\n    if (requesterUid) {\n      acceptRequest({\n        variables: {\n          requesterUid,\n        }\n      });\n    }\n  };\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction='column'\n      alignItems='center'\n      justify='center'\n      className={classes.root}\n    >\n      <Grid item className={classes.gridItem}>\n        {requestsData.length <= 0 ?\n          <Typography variant='h4' style={{textAlign: 'center'}}>No Requests</Typography> :\n          <List className={classes.list}>\n            {requestsData.map((value, index) => {\n              const labelId = `checkbox-list-label-${value}`;\n\n              return (\n                <ListItem key={index} role={undefined} dense button onClick={handleToggle(value)}>\n                  <ListItemIcon>\n                    <Checkbox\n                      edge='start'\n                      checked={checked.indexOf(value) !== -1}\n                      tabIndex={-1}\n                      disableRipple\n                      inputProps={{ 'aria-labelledby': labelId }}\n                    />\n                  </ListItemIcon>\n                  <ListItemText\n                    id={labelId}\n                    primary={`${value.requester?.firstName} ${value.requester?.lastName}`}\n                    secondary={`${value.requester?.isTechnician ? 'Technician' : 'Client'} - ${value.requester?.email}`}\n                  />\n                  <ListItemSecondaryAction>\n                    <Tooltip title='Reject'>\n                      <IconButton\n                        className={classes.listItemButton}\n                        edge='end'\n                        aria-label='comments'>\n                        <CloseIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title='Accept'>\n                      <IconButton\n                        className={classes.listItemButton}\n                        onClick={() => handleAcceptRequest(requestsData[index]?.requesterUid)}\n                        edge='end'\n                        aria-label='comments'>\n                        <DoneIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n          </List>\n        }\n      </Grid>\n    </Grid>\n  );\n}\n","import IUser from '../../interfaces/User';\n\nexport enum EUserActions {\n  UPDATE_USER = 'UPDATE_USER',\n}\n\nexport function updateUser(user: IUser) {\n  return {\n    type: EUserActions.UPDATE_USER,\n    user,\n  };\n}","import React from 'react';\nimport { Button, Grid, Paper, Typography, makeStyles } from '@material-ui/core';\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ErrorIcon from '@material-ui/icons/Error';\n\n\nconst useStyles = makeStyles(() => ({\n  messageDiv: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  header: {\n    flex: 1,\n    margin: '20px 0px 0px 0px',\n  },\n  subtitle: {\n    flex: 1,\n    margin: '10px 0px'\n  },\n  statusIcon: {\n    margin: '0 auto',\n    display: 'block',\n  },\n  paperBox: {\n    minWidth: 500,\n    padding: 30,\n  },\n}));\n\nexport default function VerifyEmailView(props: IVerifyEmailViewProps) {\n  const classes = useStyles();\n  const userAuthed = localStorage.getItem('authed') === 'true';\n  const content = props.valid ? \n    (\n      <div className={classes.messageDiv}>\n        <VerifiedUserIcon fontSize='large' className={classes.statusIcon} />\n        <Typography variant='h5' className={classes.header}>\n          Your Email has been Verified!\n        </Typography>\n        <Button variant='contained' color='primary' href={userAuthed ? '/dashboard' : '/login'}>\n          { userAuthed ? 'Go to Dashboard' : 'Login'}\n        </Button>\n      </div>\n    ) :\n    (\n      <div className={classes.messageDiv}>\n        <ErrorIcon fontSize='large' className={classes.statusIcon} />\n        <Typography variant='h5' className={classes.header}>\n          Sorry...This Link is Bad\n        </Typography>\n        <Typography variant='subtitle1' className={classes.subtitle}>\n          Please sign to your account to resend the verification Email\n        </Typography>\n        <Button variant='contained' color='primary' href='/login'>\n          Login\n        </Button>\n      </div>\n    );\n  return (\n    <Grid container\n      spacing={0}\n      direction='column'\n      alignItems='center'\n      justify='center'\n      style={{ minHeight: '90vh' }}\n    >\n      <Grid item>\n        <Paper className={classes.paperBox} elevation={2}>\n          {content}\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\ninterface IVerifyEmailViewProps {\n  valid: boolean;\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { makeStyles, responsiveFontSizes, createMuiTheme, CssBaseline } from '@material-ui/core';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { useLazyQuery, gql, ApolloError, ServerParseError } from '@apollo/client';\nimport { IRootReducer } from '../../redux/IRootReducer';\nimport Dashboard from '../Dashboard/Dashboard';\nimport TicketView from '../TicketView/TicketView';\nimport NewTicketView from '../NewTicketView/NewTicketView';\nimport TicketDetailView from '../TicketDetailView/TicketDetailView';\nimport TasksView from '../TasksView/TasksView';\nimport NewTaskView from '../NewTaskView/NewTaskView';\nimport TaskDetailView from '../TaskDetailView/TaskDetailView';\nimport Navbar from '../Navbar/Navbar';\nimport NotFound from '../NotFound/NotFound';\nimport SignUp from '../SignUp/SignUp';\nimport Login from '../Login/Login';\nimport PeoplesView from '../PeoplesView/PeoplesView';\nimport RequestsView from '../RequestsView/RequestsView';\nimport VerifyEmailView from '../VerifyEmailView/VerifyEmailView';\nimport IUser from '../../interfaces/User';\nimport { updateUser } from '../../redux/actions/UserActions';\nimport { changeAuthed } from '../../redux/actions/AuthedActions';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: '100vh',\n  },\n}));\n\nconst App: React.FC = () => {\n\n  // Redux\n  const isAuthed: boolean = useSelector<IRootReducer, boolean>(state => state.authedReducer.isAuthed);\n  const user: IUser = useSelector<IRootReducer, IUser>(state => state.userReducer?.user);\n  const dispatch = useDispatch();\n\n  // GraphQL\n  const getUserInfoQuery = gql`\n    query {\n      getUserInfo {\n        uid\n        firstName\n        middleName\n        lastName\n        email\n        phone\n        company\n        isTechnician\n      }\n    }\n  `;\n  const [getUserInfo] = useLazyQuery(getUserInfoQuery, {\n    onCompleted: (data: { getUserInfo: IUser }) => {\n      const {\n        uid,\n        firstName,\n        middleName,\n        lastName,\n        email,\n        phone,\n        company,\n        isTechnician\n      } = data.getUserInfo;\n      const userData = { uid, firstName, middleName, lastName, email, phone, company, isTechnician };\n      localStorage.setItem('user', JSON.stringify(userData));\n      dispatch(updateUser(userData));\n    },\n    onError: (error: ApolloError) => {\n      if ((error.networkError as ServerParseError)?.statusCode === 401) {\n        localStorage.setItem('authed', 'false');\n        dispatch(changeAuthed(false));\n      }\n    },\n  });\n\n  useEffect(() => {\n    getUserInfo();\n  }, [isAuthed]);\n\n  // Styling\n  const theme = responsiveFontSizes(createMuiTheme({\n    palette: {\n      type: localStorage.getItem('theme') === 'dark' ? 'dark' : 'light',\n    },\n  }));\n  const classes = useStyles(theme);\n\n  return (\n    <ThemeProvider theme={theme}>\n      < CssBaseline />\n      <div className={classes.root} style={{ backgroundColor: theme.palette.background.default }}>\n        <Router>\n          {isAuthed ? <Navbar /> : null}\n          <Switch>\n            <Route path='/dashboard'>\n              { isAuthed ? <Dashboard /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/tickets'>\n              { isAuthed ? <TicketView /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/ticket/new'>\n              { isAuthed ? <NewTicketView /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/ticket/:ticketId'>\n              { isAuthed ? <TicketDetailView /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/tasks'>\n              { isAuthed ? <TasksView /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/task/new'>\n              { isAuthed ? <NewTaskView /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/task/:taskId'>\n              { isAuthed ? <TaskDetailView /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/clients'>\n              {\n                isAuthed ?\n                  user?.isTechnician ? <PeoplesView show='clients' /> : <Redirect to='/technicians' />\n                  : <Redirect to='/login' />\n              }\n            </Route>\n            <Route path='/technicians'>\n              { isAuthed ? <PeoplesView show='technicians' /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/requests'>\n              { isAuthed ? <RequestsView /> : <Redirect to='/login' /> }\n            </Route>\n            <Route path='/verify/success'>\n              <VerifyEmailView valid={true}/>\n            </Route>\n            <Route path='/verify/fail'>\n              <VerifyEmailView valid={false}/>\n            </Route>\n            <Route path='/login'>\n              { !isAuthed ? <Login /> : <Redirect to='/dashboard' /> }\n            </Route>\n            <Route path='/signup'>\n              { !isAuthed ? <SignUp /> : <Redirect to='/dashboard' /> }\n            </Route>\n            <Route exact path='/'>\n              <Redirect to='/dashboard' />\n            </Route>\n            <Route path='/*' component={NotFound} />\n          </Switch>\n        </Router>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AnyAction } from 'redux';\nimport { EAuthedActions } from '../actions/AuthedActions';\nimport { IAuthedState } from '../states/IAuthedState';\n\nconst DEFAULT_STATE: IAuthedState = {\n  isAuthed: localStorage.getItem('authed') === 'true' ? true : false,\n};\n\nexport function authedReducer(state = DEFAULT_STATE, action: AnyAction): IAuthedState {\n  switch (action.type) {\n    case EAuthedActions.CHANGE_AUTHED:\n      return { ...state, isAuthed: action.isAuthed };\n    default:\n      return state;\n  }\n}\n","import { AnyAction } from 'redux';\nimport { EUserActions } from '../actions/UserActions';\nimport { IUserState } from '../states/IUserState';\n\nconst DEFAULT_STATE: IUserState = {\n  user: localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user') ?? '{}') : null,\n};\n\nexport function userReducer(state = DEFAULT_STATE, action: AnyAction): IUserState {\n  switch (action.type) {\n    case EUserActions.UPDATE_USER:\n      return { ...state, user: action.user };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { combineReducers, createStore } from 'redux';\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { onError } from 'apollo-link-error';\nimport { authedReducer } from './redux/reducers/AuthedReducer';\nimport { userReducer } from './redux/reducers/UserReducer';\n\nconst rootReducer = combineReducers({\n  authedReducer,\n  userReducer,\n});\n\nconst store = createStore(rootReducer);\n\n// GraphQL Client\nconst GraphQLClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: '/api/graphql',\n  }),\n  defaultOptions: {\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'none',\n    },\n    mutate: {\n      fetchPolicy: 'network-only',\n      errorPolicy: 'none',\n    }\n  }\n});\n\nonError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ApolloProvider client={GraphQLClient}>\n        <App />\n      </ApolloProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}